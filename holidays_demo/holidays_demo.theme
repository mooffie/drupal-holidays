<?php
// $Id$

/**
 * @file
 * Theming functions.
 */

/**
 * Process variables for holidays-calendar-navigation.tpl.php
 *
 * The $vars array contains the following arguments:
 * - $calendar
 */
function template_preprocess_holidays_calendar_navigation(&$vars) {
  global $year, $month;
  drupal_add_js (drupal_get_path('module', 'holidays_demo') . '/holidays_demo.theme.js');
  drupal_add_css(drupal_get_path('module', 'holidays_demo') . '/holidays_demo.theme.css');
  $vars['today'] = getdate(time());
  $vars['year']  = $year;
  $vars['month'] = $month;
  $vars['first_date_shown'] = array('year' => $year, 'mon' => $month, 'mday' => 1);
  $vars['last_date_shown']  = array('year' => $year, 'mon' => $month, 'mday' => cal_days_in_month(CAL_GREGORIAN, $month, $year));
}

function theme_holidays_year_selector($current_year) {
  $output = '<select id="year-selector">';
  foreach (range($current_year - 70, $current_year + 70) as $y) {
    $selected = ($y == $current_year) ? 'selected' : '';
    $output .= "<option value='$y' $selected>$y</option>";
  }
  $output .= '</select>';
  return $output;
}

function theme_holidays_month_selector($current_month) {
  $output = '<select id="month-selector">';
  foreach (range(1, 12) as $m) {
    $selected = ($m == $current_month) ? 'selected' : '';
    $output .= "<option value='$m' $selected>" . map_month($m) . "</option>";
  }
  $output .= '</select>';
  return $output;
}

function _holidays_build_url($year, $month) {
  $url = request_uri();
  if ($month == 13) {
    ++$year;
    $month = 1;
  }
  if ($month == 0) {
    --$year;
    $month = 12;
  }
  if (strstr($url, 'year=')) {
    $url = preg_replace('/(?<=year=)(\d+)/', $year, $url);
    $url = preg_replace('/(?<=month=)(\d+)/', $month, $url);
  } else {
    $url .= strstr($url, '?') ? '&' : '?';
    $url .= "year=$year&month=$month";
  }
  return $url;
}

function _holidays_build_link($text, $year, $month, $img = NULL) {
  $url = _holidays_build_url($year, $month);
  if ($img) {
    $text = theme('image', drupal_get_path('module', 'holidays_demo') . '/' . $img, $text, $text);
  }
  return "<a href='$url'>$text</a>";
}

function _holidays_forward_arrow($cal) {
  return _holidays_calculate_dir($cal) == 'ltr' ? 'right.gif' : 'left.gif';
}

function _holidays_back_arrow($cal) {
  return  _holidays_calculate_dir($cal) == 'ltr' ? 'left.gif' : 'right.gif';
}

/**
 * You should include the 'demo-core.css' style sheet in your page for a
 * pretty display.
 */
/**
 * Process variables for holidays-calendar-month.tpl.php
 *
 * The $vars array contains the following arguments:
 * - $calendar
 * - $year: The Gregorian year displayed.
 * - $month: The Gregorian month displayed.
 */
function template_preprocess_holidays_calendar_month(&$vars) {
  $calendar =& $vars['calendar'];
  $year     =  $vars['year'];
  $month    =  $vars['month'];

  $days_in_month = cal_days_in_month(CAL_GREGORIAN, $month, $year);
  $prev_dow      = 100; // Anything above 7.

  if ($calendar->settings['language'] == CAL_LANG_FOREIGN) {
    $vars['day_names'] = array(t('Sun'), t('Mon'), t('Tue'), t('Wed'), t('Thu'), t('Fri'), t('Sat'));
  } else {
    $vars['day_names'] = $calendar->getDaysOfWeek();
  }

  $rows = array();
  $row = array();
  for ($day = 1; $day <= $days_in_month; $day++)
  {
    $jdc = gregoriantojd($month, $day, $year);
    $dow = jddayofweek($jdc, 0) + 1;

    if ($dow < $prev_dow) {
      // Starting a new week, so start a new row in table.
      if ($day != 1) {
        $rows[] = $row;
        $row = array();
      } else {
        for ($i = 1; $i < $dow; $i++) {
          $row[] = theme('holidays_calendar_day_void');
        }
      }
    }
    $row[] = theme('holidays_calendar_day', $calendar, $jdc);
    $prev_dow = $dow;
  }
  for ($i = $dow + 1; $i <= 7; $i++) {
    $row[] = theme('holidays_calendar_day_void');
  }
  $rows[] = $row;

  $vars['rows'] = $rows;
}

/**
 * Process variables for holidays-calendar-day.tpl.php
 *
 * The $vars array contains the following arguments:
 * - $calendar
 * - $jdc: The date of the day displayed, as a Julian day count.
 */
function template_preprocess_holidays_calendar_day(&$vars) {
  $calendar =& $vars['calendar'];
  $jdc      =  $vars['jdc'];

  $today_jdc = unixtojd(time());

  $native_date = $calendar->convertToNative(array('jdc' => $jdc));
  $holidays = $calendar->getHolidays($native_date);

  $holiday_classes = array();
  if ($holidays) {
    foreach ($holidays as $hday) {
      $holiday_classes[$hday['id']] = 1;
      $holiday_classes[$hday['class']] = 1;
    }
  }
  $vars['holiday_classes'] = implode(' ', array_keys($holiday_classes));
  $vars['holidays'] = $holidays;
  $vars['is_today'] = ($jdc == $today_jdc);
  $vars['native_date'] = $native_date;
  $gregorian = cal_from_jd($jdc, CAL_GREGORIAN);
  $vars['gregorian_date'] = array(
    // For conformity with the rest of our API, we want getdate()'s naming conventions.
    'year' => $gregorian['year'],
    'mon'  => $gregorian['month'],
    'mday' => $gregorian['day'],
  );
}

// Figures out the directionality of the table.
function  _holidays_calculate_dir($calendar) {
  if ($calendar->is_rtl() && $calendar->settings_get('language') == CAL_LANG_NATIVE) {
    return 'rtl';
  } else {
    return 'ltr';
  }
}
