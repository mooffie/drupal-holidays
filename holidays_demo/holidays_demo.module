<?php
// $Id$

/**
 * @file
 * Demonstrates the Holidays module functionality by drawing a calendar.
 */

/**
 * Implementation of hook_menu().
 */
function holidays_demo_menu() {
  $items['holidays'] = array(
    'title' => 'Holidays module demonstration',
    'page callback' => 'holidays_demo',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function holidays_demo_theme() {
  return array(
    'holidays_calendar_main' => array(
      'file' => 'holidays_demo.theme',
      'template' => 'holidays-calendar-main',
      'arguments' => array('calendar' => NULL, 'year' => NULL, 'month' => NULL, 'settings_form' => NULL),
    ),
    'holidays_calendar_navigation' => array(
      'file' => 'holidays_demo.theme',
      'template' => 'holidays-calendar-navigation',
      'arguments' => array('calendar' => NULL, 'year' => NULL, 'month' => NULL),
    ),
    'holidays_calendar_month' => array(
      'file' => 'holidays_demo.theme',
      'template' => 'holidays-calendar-month',
      'arguments' => array('calendar' => NULL, 'year' => NULL, 'month' => NULL),
    ),
    'holidays_calendar_day' => array(
      'file' => 'holidays_demo.theme',
      'template' => 'holidays-calendar-day',
      'arguments' => array('calendar' => NULL, 'jdc' => NULL),
    ),
    'holidays_calendar_day_void' => array(
      'file' => 'holidays_demo.theme',
      'template' => 'holidays-calendar-day-void',
      'arguments' => array(),
    ),
    'holidays_year_selector' => array(
      'file' => 'holidays_demo.theme',
      'arguments' => array('current_year' => NULL),
    ),
    'holidays_month_selector' => array(
      'file' => 'holidays_demo.theme',
      'arguments' => array('current_month' => NULL),
    ),
  );
}

// Builds the selection and settings form. Note that, for usability reasons, this
// is a GET form. Since FAPI doens't process GET forms, we will have to so some
// chores ourselves later on.
function holidays_calendar_selection_form(&$form_state, $cal, $year, $month) {
  // @todo: shouldn't we use #value instead of #default_value, including in $cal->settings_form() ?
  // Because FAPI doesn't know *this* form was submitted.
  $form['calendar-selection'] = array(
    '#type' => 'fieldset'
  );
  $form['calendar-selection']['calendar'] = array(
    '#type' => 'select',
    '#title' => t('Select the calendar'),
    '#options' => holidays_get_calendars(),
    '#default_value' => $cal->name,
  );
  $form['calendar-selection']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update'),
  );
  if ($cal && ($settings_form = $cal->settings_form())) {
    $form['calendar-selection']['settings'] = $settings_form;
    $form['calendar-selection']['settings'] += array(
      '#type' => 'fieldset',
      '#title' => t('Settings for this calendar'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['calendar-selection']['settings_are_for'] = array(
      '#type' => 'hidden',
      '#value' => $cal->name,
    );
  }
  if (!variable_get('clean_url', '0')) {
    $form['q'] = array(
      '#type' => 'hidden',
      '#value' => $_GET['q'],
    );
  }
  $form['year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );
  $form['month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );
  $form['#method'] = 'GET';
  $form['#process'] = array('_holidays_form_process' => array());
  return $form;
}

// Makes the URL more aesthetic by removing some interval FAPI variables.
function _holidays_form_process($form) {
  unset($form['form_id']);
  unset($form['form_token']);
  return $form;
}

// Extracts the chosen calendar's settings from the URL.
function _holidays_get_url_settings($cal) {
  $settings = array();
  if (isset($_GET['settings_are_for']) && $_GET['settings_are_for'] == $cal->name) {
    // Settings are available in the URL.
    foreach ($cal->settings_list() as $name) {
      if (isset($_GET[$name])) {
        $settings[$name] = $_GET[$name];
      } else {
        // We assume a mising setting stands for an unchecked checkbox.
        $settings[$name] = 0;
      }
    }
  }
  return $settings;
}

// The main function.
function holidays_demo() {
  drupal_add_css(drupal_get_path('module', 'holidays_demo') . '/holidays_demo.css');

  if (empty($_GET['calendar'])) {
    // We use the Jewish calendar by default because, owing to its
    // extensive settings form, it serves as a nicer demonstration.
    $_GET['calendar'] = 'Jewish';
  }
  if (!($cal = holidays_factory($_GET['calendar']))) {
    drupal_set_message(t("Cannot create calendar of type '%s'", array('%s' => $_GET['calendar'])), 'error');
    return '';
  }
  $cal->settings(_holidays_get_url_settings($cal));

  $today = $cal->get_todays_date_as_gregorian();
  $year  = !empty($_GET['year'])  ? $_GET['year']  : $today['year'];
  $month = !empty($_GET['month']) ? $_GET['month'] : $today['mon'];

  $settings_form = drupal_get_form('holidays_calendar_selection_form', $cal, $year, $month);

  return theme('holidays_calendar_main', $cal, $year, $month, $settings_form);
}
