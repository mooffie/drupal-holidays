<?php
// $Id$

/**
 * @file
 * The 'holidays' Drupal module. It's simply a wrapper that pulls in the library file.
 */

/**
 * Implementation of hook_menu().
 */
function holidays_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/holidays',
      'title' => t('Calendaring systems'),
      'callback' => 'holidays_admin_overview',
      'access' => user_access('administer holidays'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'settings' && arg(2) == 'holidays') {
      require_once dirname(__FILE__) . '/holidays.admin.inc';
      if (arg(3)) {
        $items[] = array(
          'path' => 'admin/settings/holidays/' . arg(3),
          'title' => t('Calendaring systems'),
          'callback' => 'drupal_get_form',
          'callback arguments' => array('holidays_admin_calendar_form', holidays_factory(arg(3))),
          'access' => user_access('administer holidays'),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function holidays_perm() {
  return array('administer holidays');
}

/**
 * Implementation of hook_help().
 */
function holidays_help($section) {
  switch ($section) {
    case 'admin/settings/holidays':
      return t('The following calendars are installed on your system. Each calendar can be configured separately to suit your needs.');
    case 'admin/settings/holidays/' . arg(3):
      return t('You may edit the default settings for this calendar. When using the <a href="@api-page">calendaring API</a> directly (via PHP coding) any of these settings may be changed freely, but these defaults serve as the base.', array('@api-page' => 'http://drupal.org/node/XXXXX'));
  }
}

function holidays_factory($calendar_name, $settings = array()) {
  static $cache = array();
  global $locale;

  if (!$settings && isset($cache[$calendar_name])) {
    return $cache[$calendar_name];
  }
  else {
    require_once dirname(__FILE__) . '/lib/NativeCalendar.php';
    if (($cal = NativeCalendar::factory($calendar_name))) {
      $cal->settings(_holidays_default_settings($calendar_name));
      $cal->settings($settings);
      $cal->set_timestamp_decoding_function('_holidays_decode_timestamp');
      // If we're to use the website's language, and this language happens to
      // be the same as the calendar's native language, we instruct the calendar
      // to use its built-in support for this [native] language.
      //
      // E.g., when we're running Drupal in the Hebrew locale, we want the
      // Jewish calendar to use its built-in Hebrew support.
      if ($cal->settings['language'] == CAL_LANG_FOREIGN && $locale == key($cal->native_language())) {
        $cal->settings['language'] = CAL_LANG_NATIVE;
      }
      // We cache this object only if no customizations were supplied.
      if (!$settings) {
        $cache[$calendar_name] = $cal;
      }
      return $cal;
    }
  }
}

function holidays_get_calendars() {
  require_once dirname(__FILE__) . '/lib/NativeCalendar.php';
  return NativeCalendar::factory_list();
}

function _holidays_default_settings($calendar_name) {
  return variable_get('holidays_defaults_' . $calendar_name, array());
}

/** 
 * When a calendar is asked to convert a unix timestamp to a native date, 
 * it first needs to convert the timestamp --which is given in UTC-- to local
 * time. The following function is registered to perform this conversion.
 */
function _holidays_decode_timestamp($timestamp) {
  // We could duplicate format_date()'s logic here, but it turns out it isn't a 
  // significant performace hit to envelope it. Leaning on format_date() also 
  // makes our code "forward-compatible" (think D7's timezones). Last but not 
  // least: PHP's date handling functions would still require us to juggle with 
  // strings.
  $parts = split('-', format_date($timestamp, 'custom', 'Y-m-d'));
  return array(
    'year' => $parts[0],
    'mon'  => $parts[1],
    'mday' => $parts[2],
  );
}
